/* Generated By:JJTree&JavaCC: Do not edit this line. ExpressionCCParser.java */
package org.smile.expression.parser;
import org.smile.util.StringUtils;
import org.smile.expression.*;
import java.io.Reader;
import java.io.StringReader;
import java.util.List;
import java.util.ArrayList;

public class ExpressionCCParser/*@bgen(jjtree)*/implements ExpressionCCParserTreeConstants, ExpressionCCParserConstants {/*@bgen(jjtree)*/
  protected JJTExpressionCCParserState jjtree = new JJTExpressionCCParserState();public static final SimpleExpression parse(Reader reader) throws ParseException
  {
    ExpressionCCParser parser = new ExpressionCCParser(reader);
    return parser.parse();
  }

  public static final SimpleExpression parse(String expression) throws ParseException
  {
    ExpressionCCParser parser = new ExpressionCCParser(new StringReader(expression));
    return parser.parse();
  }

  final public SimpleExpression parse() throws ParseException {
 /*@bgen(jjtree) parse */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);SimpleExpression retval = null;
  MultipleExpression multiple = null;
  SimpleExpression subexp = null;
  boolean wrapNot = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
      wrapNot = true;
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      retval = Expression();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_SEMICOLON:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        jj_consume_token(K_SEMICOLON);
        subexp = Expression();
      if (multiple == null)
      {
        multiple = new MultipleExpression();
      }
      multiple.addExpression(subexp);
      }
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (wrapNot)
    {
      retval = new NotExpression(retval);
      retval.setSource("parse");
    }
    if (multiple != null)
    {
      if (retval != null)
      {
        multiple.addExpression(0, retval);
      }
      {if (true) return multiple;}
    }
    {if (true) return retval;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleExpression Expression() throws ParseException {
 /*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);SimpleExpression retval = null;
  boolean wrapNot = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
        wrapNot = true;
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      if (jj_2_1(2147483647)) {
        retval = TrinomialExpression();
      } else if (jj_2_2(2147483647)) {
        retval = BinaryExpression();
      } else if (jj_2_3(2147483647)) {
        retval = OrExpression();
      } else if (jj_2_4(2147483647)) {
        retval = AdditiveExpression();
      } else if (jj_2_5(2147483647)) {
        retval = NumberExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 31:
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_NOT:
            jj_consume_token(K_NOT);
          wrapNot = true;
            break;
          default:
            jj_la1[3] = jj_gen;
            ;
          }
          retval = Expression();
          jj_consume_token(32);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (wrapNot)
    {
      retval = new NotExpression(retval);
      retval.setSource("Expression");
    }
    {if (true) return retval;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleExpression OrExpression() throws ParseException {
 /*@bgen(jjtree) OrExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);SimpleExpression left, right, result;
  SymbolExpression operate;
    try {
      left = AndExpression();
    result = left;
      label_2:
      while (true) {
        if (jj_2_6(2147483647)) {
          ;
        } else {
          break label_2;
        }
        jj_consume_token(K_OR);
      operate = new ConditionSymbolExpression(Expression.OR);
        right = AndExpression();
      result = new ConditionExpression(left, right, operate);
      left = result;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    result.setSource("OrExpression");
    {if (true) return result;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleExpression AndExpression() throws ParseException {
 /*@bgen(jjtree) AndExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);SimpleExpression left, right, result;
  SymbolExpression operate;
  boolean not = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
      not = true;
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      if (jj_2_7(2147483647)) {
        left = ConditionExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 31:
          jj_consume_token(31);
          left = OrExpression();
          jj_consume_token(32);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    left.setWrapNot(not);
    not = false;
    result = left;
      label_3:
      while (true) {
        if (jj_2_8(2147483647)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(K_AND);
      operate = new ConditionSymbolExpression(Expression.AND);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NOT:
          jj_consume_token(K_NOT);
        not = true;
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        if (jj_2_9(2147483647)) {
          right = ConditionExpression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 31:
            jj_consume_token(31);
            right = OrExpression();
            jj_consume_token(32);
            break;
          default:
            jj_la1[8] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      right.setWrapNot(not);
      not = false;
      result = new ConditionExpression(left, right, operate);
      result.setSource("AndExpression");
      left = result;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return result;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleExpression ConditionPartExpression() throws ParseException {
 /*@bgen(jjtree) ConditionPartExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONPARTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);SimpleExpression part = null;
    try {
      if (jj_2_10(2147483647)) {
        part = AdditiveExpression();
      } else if (jj_2_11(2147483647)) {
        part = Function();
      } else if (jj_2_12(2147483647)) {
        part = OneKeyWord();
      } else if (jj_2_13(2147483647)) {
        part = NumberExpression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return part;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleExpression ConditionExpression() throws ParseException {
 /*@bgen(jjtree) ConditionExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);SimpleExpression start = null;
  SimpleExpression end = null;
  SymbolExpression operate = null;
  boolean not = false;
  boolean wrapNot = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
      wrapNot = true;
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      start = ConditionPartExpression();
      start.setWrapNot(wrapNot);
      wrapNot = false;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
      not = true;
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LIKE:
        operate = LikeWord();
        break;
      case NOT_EQAUL:
      case GREAT_EQAUL:
      case LESS_EQAUL:
      case LESS_THAN:
      case GREAT_THAN:
      case EQAUL:
      case K_IS:
      case INSTANCEOF:
        operate = OperateWord();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NOT:
          jj_consume_token(K_NOT);
          wrapNot = true;
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      end = ConditionPartExpression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    SimpleExpression result = new ConditionExpression(start, end, operate);
    result.setNot(not);
    if (end instanceof NullExpression)
    {
      result.setWrapNot(wrapNot);
    }
    else
    {
      end.setWrapNot(wrapNot);
    }
    result.setSource("ConditionExpression");
    {if (true) return result;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String FieldName() throws ParseException {
 /*@bgen(jjtree) FieldName */
  SimpleNode jjtn000 = new SimpleNode(JJTFIELDNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tk = null;
    try {
      tk = jj_consume_token(S_FIELD);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return tk.image;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleExpression OneKeyWord() throws ParseException {
 /*@bgen(jjtree) OneKeyWord */
  SimpleNode jjtn000 = new SimpleNode(JJTONEKEYWORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tk = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
        tk = jj_consume_token(K_NULL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return new NullExpression();}
        break;
      case S_PARAMTER:
        tk = jj_consume_token(S_PARAMTER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return new ParameterNameExpression(tk.image);}
        break;
      case S_FIELD:
        tk = jj_consume_token(S_FIELD);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return new FieldNameExpression(tk.image);}
        break;
      case S_QUOTED_CHAR:
        tk = jj_consume_token(S_QUOTED_CHAR);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return new CharExpression(StringUtils.valueOfQuoted(tk.image));}
        break;
      case K_BOOLEAN:
        tk = jj_consume_token(K_BOOLEAN);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return new BooleanExpression(Boolean.valueOf(tk.image));}
        break;
      case S_QUOTED_IDENTIFIER:
        tk = jj_consume_token(S_QUOTED_IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return new StringExpression(StringUtils.valueOfQuoted(tk.image));}
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public NumberExpression NumberExpression() throws ParseException {
 /*@bgen(jjtree) NumberExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMBEREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);NumberExpression exp;
  boolean minus = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        jj_consume_token(33);
      minus = true;
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      exp = Number();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    exp.setMinus(minus);
    {if (true) return exp;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public NumberExpression Number() throws ParseException {
 /*@bgen(jjtree) Number */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tk = null;
  NumberExpression numberExpression;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_INTEGERSTR:
        tk = jj_consume_token(S_INTEGERSTR);
      Long l = Long.parseLong(tk.image);
      if (l.longValue() == l.intValue())
      {
        numberExpression = new IntegerExpression();
      }
      else
      {
        numberExpression = new LongExpression();
      }
      numberExpression.setNumber(l);
        break;
      case S_LONG:
        tk = jj_consume_token(S_LONG);
      numberExpression = new LongExpression();
      numberExpression.setNumber(Long.parseLong(StringUtils.left(tk.image, tk.image.length() - 1)));
        break;
      case S_DOUBLESTR:
        tk = jj_consume_token(S_DOUBLESTR);
      numberExpression = new DoubleExpression();
      numberExpression.setNumber(Double.parseDouble(tk.image));
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    numberExpression.setSource("Number");
    {if (true) return numberExpression;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SymbolExpression OperateWord() throws ParseException {
 /*@bgen(jjtree) OperateWord */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERATEWORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tk = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQAUL:
        tk = jj_consume_token(EQAUL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return new EqualToSymbolExpression();}
        break;
      case NOT_EQAUL:
        tk = jj_consume_token(NOT_EQAUL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return new NotEqualSymbolExpression();}
        break;
      case LESS_THAN:
        tk = jj_consume_token(LESS_THAN);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return new LessThanSymbolExpression();}
        break;
      case LESS_EQAUL:
        tk = jj_consume_token(LESS_EQAUL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return new LessEqualSymbolExpression();}
        break;
      case GREAT_THAN:
        tk = jj_consume_token(GREAT_THAN);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return new GreatThanSymbolExpression();}
        break;
      case GREAT_EQAUL:
        tk = jj_consume_token(GREAT_EQAUL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return new GreatEqualSymbolExpression();}
        break;
      case K_IS:
        tk = jj_consume_token(K_IS);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return new IsSymbolExpression(tk.image);}
        break;
      case INSTANCEOF:
        tk = jj_consume_token(INSTANCEOF);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return new InstanceofSymbolExpression(tk.image);}
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SymbolExpression LikeWord() throws ParseException {
 /*@bgen(jjtree) LikeWord */
  SimpleNode jjtn000 = new SimpleNode(JJTLIKEWORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tk = null;
    try {
      tk = jj_consume_token(LIKE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return new LikeSymbolExpression(tk.image);}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleExpression BitwiseAndOr() throws ParseException {
 /*@bgen(jjtree) BitwiseAndOr */
  SimpleNode jjtn000 = new SimpleNode(JJTBITWISEANDOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);SimpleExpression result = null;
  SimpleExpression leftExpression = null;
  SimpleExpression rightExpression = null;
  SymbolExpression symbol = null;
    try {
      leftExpression = BitwiseXor();
    result = leftExpression;
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 34:
        case 35:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 34:
          jj_consume_token(34);
        symbol = new MathSymbolExpression("|");
        result = new MathCalculationExpression(symbol);
          break;
        case 35:
          jj_consume_token(35);
        symbol = new MathSymbolExpression("&");
        result = new MathCalculationExpression(symbol);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      result.setSource("BitwiseAndOr");
        rightExpression = BitwiseXor();
      BinaryExpression binExp = (BinaryExpression) result;
      binExp.setLeft(leftExpression);
      binExp.setRight(rightExpression);
      leftExpression = result;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return result;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/** + or - */
  final public SimpleExpression AdditiveExpression() throws ParseException {
 /*@bgen(jjtree) AdditiveExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);SimpleExpression result = null;
  SimpleExpression leftExpression = null;
  SimpleExpression rightExpression = null;
  SymbolExpression symbol = null;
    try {
      leftExpression = MultiplicativeExpression();
    result = leftExpression;
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 33:
        case 36:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 36:
          jj_consume_token(36);
        symbol = new AddSymbolExpression();
        result = new MathCalculationExpression(symbol);
          break;
        case 33:
          jj_consume_token(33);
        symbol = new SubtractSymbolExpression();
        result = new MathCalculationExpression(symbol);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      result.setSource("AdditiveExpression");
        rightExpression = MultiplicativeExpression();
      BinaryExpression binExp = (BinaryExpression) result;
      binExp.setLeft(leftExpression);
      binExp.setRight(rightExpression);
      leftExpression = result;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return result;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/** xxx ? xx : ss */
  final public SimpleExpression TrinomialExpression() throws ParseException {
 /*@bgen(jjtree) TrinomialExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTTRINOMIALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);TrinomialExpression result = null;
  SimpleExpression leftExpression = null;
  SimpleExpression rightExpression = null;
  SimpleExpression condition = null;
  boolean conditionWrapNot = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
      conditionWrapNot = true;
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      if (jj_2_14(2147483647)) {
        condition = OrExpression();
      } else if (jj_2_15(2147483647)) {
        condition = BitwiseAndOr();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(K_QUESTION);
      if (jj_2_16(2147483647)) {
        leftExpression = BinaryExpression();
      } else if (jj_2_17(2147483647)) {
        leftExpression = OrExpression();
      } else if (jj_2_18(2147483647)) {
        leftExpression = AdditiveExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 31:
          jj_consume_token(31);
          leftExpression = TrinomialExpression();
          jj_consume_token(32);
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(K_COLON);
      if (jj_2_19(2147483647)) {
        rightExpression = BinaryExpression();
      } else if (jj_2_20(2147483647)) {
        rightExpression = OrExpression();
      } else if (jj_2_21(2147483647)) {
        rightExpression = AdditiveExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 31:
          jj_consume_token(31);
          rightExpression = TrinomialExpression();
          jj_consume_token(32);
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (conditionWrapNot)
    {
      condition = new NotExpression(condition);
    }
    result = new TrinomialExpression();
    result.setLeft(leftExpression);
    result.setRight(rightExpression);
    result.setCondition(condition);
    result.setSource("TrinomialExpression");
    {if (true) return result;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/** a or b
	a is b
	a like b
	a > b
*/
  final public SimpleExpression BinaryExpression() throws ParseException {
 /*@bgen(jjtree) BinaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);BinaryExpression result = null;
  SimpleExpression leftExpression = null;
  SimpleExpression rightExpression = null;
  SymbolExpression symbol = null;
  boolean wrapNot = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
      wrapNot = true;
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      if (jj_2_22(2147483647)) {
        leftExpression = OrExpression();
      } else if (jj_2_23(2147483647)) {
        leftExpression = ConditionExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_BOOLEAN:
        case K_NULL:
        case K_NOT:
        case S_LONG:
        case S_INTEGERSTR:
        case S_DOUBLESTR:
        case S_FIELD:
        case S_PARAMTER:
        case S_QUOTED_CHAR:
        case S_QUOTED_IDENTIFIER:
        case 31:
        case 33:
        case 41:
          leftExpression = AdditiveExpression();
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LIKE:
        symbol = LikeWord();
        break;
      case NOT_EQAUL:
      case GREAT_EQAUL:
      case LESS_EQAUL:
      case LESS_THAN:
      case GREAT_THAN:
      case EQAUL:
      case K_IS:
      case INSTANCEOF:
        symbol = OperateWord();
        break;
      case SET:
        symbol = Voluation();
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_24(2147483647)) {
        rightExpression = OrExpression();
      } else if (jj_2_25(2147483647)) {
        rightExpression = ConditionExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_BOOLEAN:
        case K_NULL:
        case K_NOT:
        case S_LONG:
        case S_INTEGERSTR:
        case S_DOUBLESTR:
        case S_FIELD:
        case S_PARAMTER:
        case S_QUOTED_CHAR:
        case S_QUOTED_IDENTIFIER:
        case 31:
        case 33:
        case 41:
          rightExpression = AdditiveExpression();
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (symbol instanceof VoluationSymbolExpression)
    {
      result = new MathCalculationExpression(symbol);
      result.setLeft(leftExpression);
      result.setRight(rightExpression);
    }
    else
    {
      result = new ConditionExpression(leftExpression, rightExpression, symbol);
    }
    result.setWrapNot(wrapNot);
    result.setSource("BinaryExpression");
    {if (true) return result;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SymbolExpression Voluation() throws ParseException {
 /*@bgen(jjtree) Voluation */
  SimpleNode jjtn000 = new SimpleNode(JJTVOLUATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);SymbolExpression exp = null;
  Token tk = null;
    try {
      tk = jj_consume_token(SET);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    exp = new VoluationSymbolExpression();
    {if (true) return exp;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleExpression Function() throws ParseException {
 /*@bgen(jjtree) Function */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);FunctionExpression result = null;
  List < Expression > args = new ArrayList();
  SimpleExpression arg = null;
  String name;
    try {
      name = FieldName();
      jj_consume_token(31);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_BOOLEAN:
      case K_NULL:
      case K_NOT:
      case S_LONG:
      case S_INTEGERSTR:
      case S_DOUBLESTR:
      case S_FIELD:
      case S_PARAMTER:
      case S_QUOTED_CHAR:
      case S_QUOTED_IDENTIFIER:
      case 31:
      case 33:
      case 41:
        arg = Expression();
        args.add(arg);
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 37:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_6;
        }
        jj_consume_token(37);
        arg = Expression();
        args.add(arg);
      }
      jj_consume_token(32);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    result = new FunctionExpression();
    result.setName(name);
    result.setArgs(args);
    result.setSource("FunctionExpression");
    {if (true) return result;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleExpression MultiplicativeExpression() throws ParseException {
 /*@bgen(jjtree) MultiplicativeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);SimpleExpression result = null;
  SimpleExpression leftExpression = null;
  SimpleExpression rightExpression = null;
  SymbolExpression symbol = null;
    try {
      if (jj_2_26(2147483647)) {
        leftExpression = BitwiseAndOr();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 31:
          jj_consume_token(31);
          leftExpression = AdditiveExpression();
          jj_consume_token(32);
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    result = leftExpression;
      label_7:
      while (true) {
        if (jj_2_27(2)) {
          ;
        } else {
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 38:
          jj_consume_token(38);
        symbol = new MultiplySymbolExpression();
        result = new MathCalculationExpression(symbol);
          break;
        case 39:
          jj_consume_token(39);
        symbol = new DivisionSymbolExpression();
        result = new MathCalculationExpression(symbol);
          break;
        case 40:
          jj_consume_token(40);
        result = symbol = new ModularArithmeticSymbolExpression();
        result = new MathCalculationExpression(symbol);
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (jj_2_28(2147483647)) {
          rightExpression = BitwiseAndOr();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 31:
            jj_consume_token(31);
            rightExpression = AdditiveExpression();
            jj_consume_token(32);
            break;
          default:
            jj_la1[32] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      BinaryExpression binExp = (BinaryExpression) result;
      binExp.setLeft(leftExpression);
      binExp.setRight(rightExpression);
      result.setSource("MultiplicativeExpression");
      leftExpression = result;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return result;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleExpression BitwiseXor() throws ParseException {
 /*@bgen(jjtree) BitwiseXor */
  SimpleNode jjtn000 = new SimpleNode(JJTBITWISEXOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);SimpleExpression result = null;
  SimpleExpression leftExpression = null;
  SimpleExpression rightExpression = null;
  SymbolExpression symbol = null;
  boolean wrapNot = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
      case 41:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NOT:
          jj_consume_token(K_NOT);
          break;
        case 41:
          jj_consume_token(41);
      wrapNot = true;
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      if (jj_2_29(2147483647)) {
        leftExpression = Function();
      } else if (jj_2_30(2147483647)) {
        leftExpression = OneKeyWord();
      } else if (jj_2_31(2147483647)) {
        leftExpression = NumberExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 31:
          jj_consume_token(31);
          leftExpression = TrinomialExpression();
          jj_consume_token(32);
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    result = leftExpression;
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 41:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_8;
        }
        jj_consume_token(41);
      symbol = new MathSymbolExpression("^");
        if (jj_2_32(2147483647)) {
          leftExpression = Function();
        } else if (jj_2_33(2147483647)) {
          rightExpression = OneKeyWord();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S_LONG:
          case S_INTEGERSTR:
          case S_DOUBLESTR:
          case 33:
            rightExpression = NumberExpression();
            break;
          default:
            jj_la1[37] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      BinaryExpression binExp = new MathCalculationExpression(symbol);
      binExp.setLeft(leftExpression);
      binExp.setRight(rightExpression);
      binExp.setSource("BitwiseXor");
      result = binExp;
      leftExpression = result;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (wrapNot)
    {
      result = new NotExpression(result);
    }
    {if (true) return result;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(35)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(34)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(SET)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_64()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_65()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(LIKE)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    xsp = jj_scanpos;
    if (jj_3R_52()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(INSTANCEOF)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(K_IS)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(GREAT_EQAUL)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(GREAT_THAN)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(LESS_EQAUL)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(LESS_THAN)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(NOT_EQAUL)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(41)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(EQAUL)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(31)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(31)) return true;
    if (jj_3R_11()) return true;
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(S_DOUBLESTR)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(31)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(41)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    }
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(K_AND)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(S_LONG)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_91()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(31)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(K_AND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(S_INTEGERSTR)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(31)) return true;
    if (jj_3R_11()) return true;
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(31)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_72()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(33)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    if (jj_scan_token(K_QUESTION)) return true;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    }
    if (jj_scan_token(K_COLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(39)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(K_OR)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  private boolean jj_3_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(S_QUOTED_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(K_BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(31)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(S_QUOTED_CHAR)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(33)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(S_FIELD)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(36)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(S_PARAMTER)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(37)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(31)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(S_FIELD)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_55()) return true;
    if (jj_scan_token(31)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_9()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ExpressionCCParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[38];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20000,0x10000,0x20000,0x20000,0x80000000,0x20000,0x80000000,0x20000,0x80000000,0x20000,0x20000,0x20000,0xefc,0x63003000,0x0,0xe00000,0x6fc,0x0,0x0,0x0,0x0,0x20000,0x80000000,0x80000000,0x20000,0xe3e23000,0xffc,0xe3e23000,0xe3e23000,0x0,0x80000000,0x0,0x80000000,0x20000,0x20000,0x80000000,0x0,0xe00000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0xc,0xc,0x12,0x12,0x0,0x0,0x0,0x0,0x202,0x0,0x202,0x202,0x20,0x0,0x1c0,0x0,0x200,0x200,0x0,0x200,0x2,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[33];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ExpressionCCParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ExpressionCCParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExpressionCCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ExpressionCCParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExpressionCCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ExpressionCCParser(ExpressionCCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ExpressionCCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 38; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 33; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
