/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ExpressionCCParser.jj */
/*@egen*/options
{
  IGNORE_CASE = true;
  STATIC = false;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(ExpressionCCParser)
package org.smile.expression.parser;
import org.smile.util.StringUtils;
import org.smile.expression.*;
import java.io.Reader;
import java.io.StringReader;
import java.util.List;
import java.util.ArrayList;

public class ExpressionCCParser/*@bgen(jjtree)*/implements ExpressionCCParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTExpressionCCParserState jjtree = new JJTExpressionCCParserState();

/*@egen*/
  public static final SimpleExpression parse(Reader reader) throws ParseException
  {
    ExpressionCCParser parser = new ExpressionCCParser(reader);
    return parser.parse();
  }

  public static final SimpleExpression parse(String expression) throws ParseException
  {
    ExpressionCCParser parser = new ExpressionCCParser(new StringReader(expression));
    return parser.parse();
  }
}

PARSER_END(ExpressionCCParser)

SKIP :
{
  < WHITESPACE :
    " "
  | "\t"
  | "\r"
  | "\n" >
}

TOKEN :
{
  < NOT_EQAUL :
    "!" (< WHITESPACE >)* "="
  | "<" (< WHITESPACE >)* ">" >
| < GREAT_EQAUL : ">" (< WHITESPACE >)* "=" >
| < LESS_EQAUL : "<" (< WHITESPACE >)* "=" >
| < LESS_THAN : "<" >
| < GREAT_THAN : ">" >
| < EQAUL : "==" >
| < SET : "=" >
| < K_IS :
    " is "
  | " IS " >
| < INSTANCEOF : " instanceof " >
| < LIKE :
    "LIKE"
  | "like" 
  >
| < K_BOOLEAN :
    "true"
  | "false" 
  >
| < K_NULL : "null" >
| < K_QUESTION : "?" >
| < K_COLON : ":" >
| < K_SEMICOLON : ";" >
| < K_NOT :
    "not"
  | "NOT"
  | "!" >
| < K_OR :
    "or"
  | "OR"
  | "||" >
| < K_AND :
    "AND"
  | "and"
  | "&&" >
| < F_PREFIX : ([ "a"-"z", "A"-"Z" ])+ ":" >
| < S_LONG : (< DIGIT >)+ [ "l", "L" ] >
| < S_INTEGERSTR : (< DIGIT >)+ >
| < S_DOUBLESTR :
    (
      (< S_INTEGERSTR >)? "." < S_INTEGERSTR >
      (
        [ "e", "E" ] ([ "+", "-" ])? < S_INTEGERSTR >
      )?
    | 
      < S_INTEGERSTR > "."
      (
        [ "e", "E" ] ([ "+", "-" ])? < S_INTEGERSTR >
      )?
    | 
      < S_INTEGERSTR > [ "e", "E" ] ([ "+", "-" ])? < S_INTEGERSTR >
    ) >
| < S_FIELD : (< F_PREFIX >)? (< LETTER >)+ (< LETTER_DIGIT >)* >
| < S_PARAMTER :
    [ "#" ]
    (
      < S_FIELD >
    | < S_INTEGERSTR >
    ) >
| < #LETTER : [ "a"-"z", "A"-"Z", "_", ".", "]", "[", "\u4e00"-"\u9fa5" ] >
| < #LETTER_DIGIT : [ "a"-"z", "A"-"Z", "_", ".", "]", "[", "\u4e00"-"\u9fa5", "0"-"9" ] >
| < #DIGIT : [ "0"-"9" ] >
| < S_QUOTED_CHAR :
    (
      "'" (~[ "\n", "\r", "'" ]) "'"
    ) >
| < S_QUOTED_IDENTIFIER :
    (
      "\"" (~[ "\n", "\r", "\"" ])* "\""
    )
  |
    (
      "`" (~[ "\n", "\r", "`" ])* "`"
    )
  |
    (
      "'" (~[ "\n", "\r", "'" ])* "'"
    ) >
}

SimpleExpression parse() :
{/*@bgen(jjtree) parse */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  SimpleExpression retval = null;
  MultipleExpression multiple = null;
  SimpleExpression subexp = null;
  boolean wrapNot = false;
}
{/*@bgen(jjtree) parse */
  try {
/*@egen*/
  [
    < K_NOT >
    {
      wrapNot = true;
    }
  ]
  (
    retval = Expression()
  )
  (
    < K_SEMICOLON > subexp = Expression()
    {
      if (multiple == null)
      {
        multiple = new MultipleExpression();
      }
      multiple.addExpression(subexp);
    }
  )*
  < EOF >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (wrapNot)
    {
      retval = new NotExpression(retval);
      retval.setSource("parse");
    }
    if (multiple != null)
    {
      if (retval != null)
      {
        multiple.addExpression(0, retval);
      }
      return multiple;
    }
    return retval;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleExpression Expression()             :
{/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  SimpleExpression retval = null;
  boolean wrapNot = false;
}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  (
    [
      < K_NOT >
      {
        wrapNot = true;
      }
    ]
    (
      LOOKAHEAD(TrinomialExpression())
      retval = TrinomialExpression()
    | 
      LOOKAHEAD(BinaryExpression())
      retval = BinaryExpression()
    | 
      LOOKAHEAD(OrExpression())
      retval = OrExpression()
    | 
      LOOKAHEAD(AdditiveExpression())
      retval = AdditiveExpression()
    | 
      LOOKAHEAD(NumberExpression())
      retval = NumberExpression()
    | 
      "("
      [
        < K_NOT >
        {
          wrapNot = true;
        }
      ]
      retval = Expression() 
      ")"
    )
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (wrapNot)
    {
      retval = new NotExpression(retval);
      retval.setSource("Expression");
    }
    return retval;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleExpression OrExpression() :
{/*@bgen(jjtree) OrExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  SimpleExpression left, right, result;
  SymbolExpression operate;
}
{/*@bgen(jjtree) OrExpression */
  try {
/*@egen*/
  left = AndExpression()
  {
    result = left;
  }
  (
    LOOKAHEAD(< K_OR >)
    < K_OR >
    {
      operate = new ConditionSymbolExpression(Expression.OR);
    }
    right = AndExpression()
    {
      result = new ConditionExpression(left, right, operate);
      left = result;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    result.setSource("OrExpression");
    return result;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleExpression AndExpression() :
{/*@bgen(jjtree) AndExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  SimpleExpression left, right, result;
  SymbolExpression operate;
  boolean not = false;
}
{/*@bgen(jjtree) AndExpression */
  try {
/*@egen*/
  [
    < K_NOT >
    {
      not = true;
    }
  ]
  (
    LOOKAHEAD(ConditionExpression())
    left = ConditionExpression()
  | 
    "(" left = OrExpression() ")"
  )
  {
    left.setWrapNot(not);
    not = false;
    result = left;
  }
  (
    LOOKAHEAD(< K_AND >)
    < K_AND >
    {
      operate = new ConditionSymbolExpression(Expression.AND);
    }
    [
      < K_NOT >
      {
        not = true;
      }
    ]
    (
      LOOKAHEAD(ConditionExpression())
      right = ConditionExpression()
    | 
      "(" right = OrExpression() ")"
    )
    {
      right.setWrapNot(not);
      not = false;
      result = new ConditionExpression(left, right, operate);
      result.setSource("AndExpression");
      left = result;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return result;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleExpression ConditionPartExpression() :
{/*@bgen(jjtree) ConditionPartExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONPARTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  SimpleExpression part = null;
}
{/*@bgen(jjtree) ConditionPartExpression */
  try {
/*@egen*/
  (
    LOOKAHEAD(AdditiveExpression())
    part = AdditiveExpression()
  | 
    LOOKAHEAD(Function())
    part = Function()
  | 
    LOOKAHEAD(OneKeyWord())
    part = OneKeyWord()
  | 
    LOOKAHEAD(NumberExpression())
    part = NumberExpression()
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return part;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleExpression ConditionExpression() :
{/*@bgen(jjtree) ConditionExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  SimpleExpression start = null;
  SimpleExpression end = null;
  SymbolExpression operate = null;
  boolean not = false;
  boolean wrapNot = false;
}
{/*@bgen(jjtree) ConditionExpression */
  try {
/*@egen*/
  [
    < K_NOT >
    {
      wrapNot = true;
    }
  ]
  (
    start = ConditionPartExpression()
    {
      start.setWrapNot(wrapNot);
      wrapNot = false;
    }
  )
  [
    < K_NOT >
    {
      not = true;
    }
  ]
  (
    (
      operate = LikeWord()
    )
  |
    (
      operate = OperateWord()
      [
        < K_NOT >
        {
          wrapNot = true;
        }
      ]
    )
  )
  (
    end = ConditionPartExpression()
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    SimpleExpression result = new ConditionExpression(start, end, operate);
    result.setNot(not);
    if (end instanceof NullExpression)
    {
      result.setWrapNot(wrapNot);
    }
    else
    {
      end.setWrapNot(wrapNot);
    }
    result.setSource("ConditionExpression");
    return result;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String FieldName() :
{/*@bgen(jjtree) FieldName */
  SimpleNode jjtn000 = new SimpleNode(JJTFIELDNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token tk = null;
}
{/*@bgen(jjtree) FieldName */
  try {
/*@egen*/
  tk = < S_FIELD >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return tk.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleExpression OneKeyWord() :
{/*@bgen(jjtree) OneKeyWord */
  SimpleNode jjtn000 = new SimpleNode(JJTONEKEYWORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/	
  Token tk = null;
}
{/*@bgen(jjtree) OneKeyWord */
  try {
/*@egen*/
  tk = < K_NULL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return new NullExpression();
  }
| 
  tk = < S_PARAMTER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return new ParameterNameExpression(tk.image);
  }
| 
  tk = < S_FIELD >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return new FieldNameExpression(tk.image);
  }
| tk = < S_QUOTED_CHAR >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return new CharExpression(StringUtils.valueOfQuoted(tk.image));
  }
| 
  tk = < K_BOOLEAN >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return new BooleanExpression(Boolean.valueOf(tk.image));
  }
| 
  tk = < S_QUOTED_IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return new StringExpression(StringUtils.valueOfQuoted(tk.image));
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

NumberExpression NumberExpression() :
{/*@bgen(jjtree) NumberExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMBEREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  NumberExpression exp;
  boolean minus = false;
}
{/*@bgen(jjtree) NumberExpression */
  try {
/*@egen*/
  [
    "-"
    {
      minus = true;
    }
  ]
  exp = Number()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    exp.setMinus(minus);
    return exp;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

NumberExpression Number() :
{/*@bgen(jjtree) Number */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token tk = null;
  NumberExpression numberExpression;
}
{/*@bgen(jjtree) Number */
  try {
/*@egen*/
  (
    tk = < S_INTEGERSTR >
    {
      Long l = Long.parseLong(tk.image);
      if (l.longValue() == l.intValue())
      {
        numberExpression = new IntegerExpression();
      }
      else
      {
        numberExpression = new LongExpression();
      }
      numberExpression.setNumber(l);
    }
  | tk = < S_LONG >
    {
      numberExpression = new LongExpression();
      numberExpression.setNumber(Long.parseLong(StringUtils.left(tk.image, tk.image.length() - 1)));
    }
  | tk = < S_DOUBLESTR >
    {
      numberExpression = new DoubleExpression();
      numberExpression.setNumber(Double.parseDouble(tk.image));
    }
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    numberExpression.setSource("Number");
    return numberExpression;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SymbolExpression OperateWord() :
{/*@bgen(jjtree) OperateWord */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERATEWORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/	
  Token tk = null;
}
{/*@bgen(jjtree) OperateWord */
  try {
/*@egen*/
  tk = < EQAUL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return new EqualToSymbolExpression();
  }
| tk = < NOT_EQAUL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return new NotEqualSymbolExpression();
  }
| tk = < LESS_THAN >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return new LessThanSymbolExpression();
  }
| tk = < LESS_EQAUL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return new LessEqualSymbolExpression();
  }
| tk = < GREAT_THAN >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return new GreatThanSymbolExpression();
  }
| tk = < GREAT_EQAUL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return new GreatEqualSymbolExpression();
  }
| tk = < K_IS >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return new IsSymbolExpression(tk.image);
  }
| tk = < INSTANCEOF >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return new InstanceofSymbolExpression(tk.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SymbolExpression LikeWord() :
{/*@bgen(jjtree) LikeWord */
  SimpleNode jjtn000 = new SimpleNode(JJTLIKEWORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/	
  Token tk = null;
}
{/*@bgen(jjtree) LikeWord */
  try {
/*@egen*/
  tk = < LIKE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return new LikeSymbolExpression(tk.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleExpression BitwiseAndOr() :
{/*@bgen(jjtree) BitwiseAndOr */
  SimpleNode jjtn000 = new SimpleNode(JJTBITWISEANDOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  SimpleExpression result = null;
  SimpleExpression leftExpression = null;
  SimpleExpression rightExpression = null;
  SymbolExpression symbol = null;
}
{/*@bgen(jjtree) BitwiseAndOr */
  try {
/*@egen*/
  leftExpression = BitwiseXor()
  {
    result = leftExpression;
  }
  (
    (
      "|"
      {
        symbol = new MathSymbolExpression("|");
        result = new MathCalculationExpression(symbol);
      }
    | 
      "&"
      {
        symbol = new MathSymbolExpression("&");
        result = new MathCalculationExpression(symbol);
      }
    )
    {
      result.setSource("BitwiseAndOr");
    }
    rightExpression = BitwiseXor()
    {
      BinaryExpression binExp = (BinaryExpression) result;
      binExp.setLeft(leftExpression);
      binExp.setRight(rightExpression);
      leftExpression = result;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return result;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/** + or - */
SimpleExpression AdditiveExpression() :
{/*@bgen(jjtree) AdditiveExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  SimpleExpression result = null;
  SimpleExpression leftExpression = null;
  SimpleExpression rightExpression = null;
  SymbolExpression symbol = null;
}
{/*@bgen(jjtree) AdditiveExpression */
  try {
/*@egen*/
  leftExpression = MultiplicativeExpression()
  {
    result = leftExpression;
  }
  (
    (
      "+"
      {
        symbol = new AddSymbolExpression();
        result = new MathCalculationExpression(symbol);
      }
    | "-"
      {
        symbol = new SubtractSymbolExpression();
        result = new MathCalculationExpression(symbol);
      }
    )
    {
      result.setSource("AdditiveExpression");
    }
    rightExpression = MultiplicativeExpression()
    {
      BinaryExpression binExp = (BinaryExpression) result;
      binExp.setLeft(leftExpression);
      binExp.setRight(rightExpression);
      leftExpression = result;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return result;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/** xxx ? xx : ss */
SimpleExpression TrinomialExpression() :
{/*@bgen(jjtree) TrinomialExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTTRINOMIALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  TrinomialExpression result = null;
  SimpleExpression leftExpression = null;
  SimpleExpression rightExpression = null;
  SimpleExpression condition = null;
  boolean conditionWrapNot = false;
}
{/*@bgen(jjtree) TrinomialExpression */
  try {
/*@egen*/
  [
    < K_NOT >
    {
      conditionWrapNot = true;
    }
  ]
  (
    LOOKAHEAD(OrExpression())
    condition = OrExpression()
  | LOOKAHEAD(BitwiseAndOr())
    condition = BitwiseAndOr()
  )
  < K_QUESTION >
  (
    LOOKAHEAD(BinaryExpression())
    leftExpression = BinaryExpression()
  | 
    LOOKAHEAD(OrExpression())
    leftExpression = OrExpression()
  | 
    LOOKAHEAD(AdditiveExpression())
    leftExpression = AdditiveExpression()
  | "(" leftExpression = TrinomialExpression() ")"
  )
  < K_COLON >
  (
    LOOKAHEAD(BinaryExpression())
    rightExpression = BinaryExpression()
  | 
    LOOKAHEAD(OrExpression())
    rightExpression = OrExpression()
  | 
    LOOKAHEAD(AdditiveExpression())
    rightExpression = AdditiveExpression()
  | "(" rightExpression = TrinomialExpression() ")"
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (conditionWrapNot)
    {
      condition = new NotExpression(condition);
    }
    result = new TrinomialExpression();
    result.setLeft(leftExpression);
    result.setRight(rightExpression);
    result.setCondition(condition);
    result.setSource("TrinomialExpression");
    return result;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/** a or b
	a is b
	a like b
	a > b
*/
SimpleExpression BinaryExpression() :
{/*@bgen(jjtree) BinaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  BinaryExpression result = null;
  SimpleExpression leftExpression = null;
  SimpleExpression rightExpression = null;
  SymbolExpression symbol = null;
  boolean wrapNot = false;
}
{/*@bgen(jjtree) BinaryExpression */
  try {
/*@egen*/
  [
    < K_NOT >
    {
      wrapNot = true;
    }
  ]
  (
    LOOKAHEAD(OrExpression())
    leftExpression = OrExpression()
  | LOOKAHEAD(ConditionExpression())
    leftExpression = ConditionExpression()
  | 
    leftExpression = AdditiveExpression()
  )
  (
    symbol = LikeWord()
  | 
    symbol = OperateWord()
  | symbol = Voluation()
  )
  (
    LOOKAHEAD(OrExpression())
    rightExpression = OrExpression()
  | LOOKAHEAD(ConditionExpression())
    rightExpression = ConditionExpression()
  | 
    rightExpression = AdditiveExpression()
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (symbol instanceof VoluationSymbolExpression)
    {
      result = new MathCalculationExpression(symbol);
      result.setLeft(leftExpression);
      result.setRight(rightExpression);
    }
    else
    {
      result = new ConditionExpression(leftExpression, rightExpression, symbol);
    }
    result.setWrapNot(wrapNot);
    result.setSource("BinaryExpression");
    return result;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SymbolExpression Voluation() :
{/*@bgen(jjtree) Voluation */
  SimpleNode jjtn000 = new SimpleNode(JJTVOLUATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  SymbolExpression exp = null;
  Token tk = null;
}
{/*@bgen(jjtree) Voluation */
  try {
/*@egen*/
  tk = < SET >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    exp = new VoluationSymbolExpression();
    return exp;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleExpression Function() :
{/*@bgen(jjtree) Function */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  FunctionExpression result = null;
  List < Expression > args = new ArrayList();
  SimpleExpression arg = null;
  String name;
}
{/*@bgen(jjtree) Function */
  try {
/*@egen*/
  (
    name = FieldName() 
    "("
    [
      arg = Expression()
      {
        args.add(arg);
      }
    ]
    (
      "," arg = Expression()
      {
        args.add(arg);
      }
    )*
    ")"
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    result = new FunctionExpression();
    result.setName(name);
    result.setArgs(args);
    result.setSource("FunctionExpression");
    return result;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleExpression MultiplicativeExpression() :
{/*@bgen(jjtree) MultiplicativeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  SimpleExpression result = null;
  SimpleExpression leftExpression = null;
  SimpleExpression rightExpression = null;
  SymbolExpression symbol = null;
}
{/*@bgen(jjtree) MultiplicativeExpression */
  try {
/*@egen*/
  (
    LOOKAHEAD(BitwiseAndOr())
    leftExpression = BitwiseAndOr()
  | 
    "(" 
    leftExpression = AdditiveExpression() 
    ")"
  )
  {
    result = leftExpression;
  }
  (
    LOOKAHEAD(2)
    (
      "*"
      {
        symbol = new MultiplySymbolExpression();
        result = new MathCalculationExpression(symbol);
      }
    | "/"
      {
        symbol = new DivisionSymbolExpression();
        result = new MathCalculationExpression(symbol);
      }
    | "%"
      {
        result = symbol = new ModularArithmeticSymbolExpression();
        result = new MathCalculationExpression(symbol);
      }
    )
    (
      LOOKAHEAD(BitwiseAndOr())
      rightExpression = BitwiseAndOr()
    | 
      "(" rightExpression = AdditiveExpression() ")"
    )
    {
      BinaryExpression binExp = (BinaryExpression) result;
      binExp.setLeft(leftExpression);
      binExp.setRight(rightExpression);
      result.setSource("MultiplicativeExpression");
      leftExpression = result;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return result;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleExpression BitwiseXor() :
{/*@bgen(jjtree) BitwiseXor */
  SimpleNode jjtn000 = new SimpleNode(JJTBITWISEXOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  SimpleExpression result = null;
  SimpleExpression leftExpression = null;
  SimpleExpression rightExpression = null;
  SymbolExpression symbol = null;
  boolean wrapNot = false;
}
{/*@bgen(jjtree) BitwiseXor */
  try {
/*@egen*/
  [
    < K_NOT >
  | "^"
    {
      wrapNot = true;
    }
  ]
  (
    LOOKAHEAD(Function())
    leftExpression = Function()
  | 
    LOOKAHEAD(OneKeyWord())
    leftExpression = OneKeyWord()
  | LOOKAHEAD(NumberExpression())
    leftExpression = NumberExpression()
  | "(" leftExpression = TrinomialExpression() ")"
  )
  {
    result = leftExpression;
  }
  (
    "^"
    {
      symbol = new MathSymbolExpression("^");
    }
    (
      LOOKAHEAD(Function())
      leftExpression = Function()
    | 
      LOOKAHEAD(OneKeyWord())
      rightExpression = OneKeyWord()
    | rightExpression = NumberExpression()
    )
    {
      BinaryExpression binExp = new MathCalculationExpression(symbol);
      binExp.setLeft(leftExpression);
      binExp.setRight(rightExpression);
      binExp.setSource("BitwiseXor");
      result = binExp;
      leftExpression = result;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (wrapNot)
    {
      result = new NotExpression(result);
    }
    return result;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
